name: Deploy to Server using rsync

on:
  push:
    branches:
      - main # Mude para 'master' ou sua branch principal, se necessário

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Opcional: Etapa de Build ---
      # Se seu projeto precisa ser compilado/buildado (ex: Node.js, React, Java, etc.)
      # Descomente e ajuste a seção abaixo conforme necessário.
      # Exemplo para um projeto Node.js:
      # - name: Setup Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: '20' 
      # - name: Install dependencies and build
      #   run: |
      #     npm ci
      #     npm run build
      # --- Fim da Etapa de Build Opcional ---

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy files via rsync
        env:
          SSHPASS: ${{ secrets.PASS }}
          SSH_USER: ${{ secrets.USER }}
          SSH_HOST: ${{ secrets.HOST }}
          REMOTE_PATH: "/home/storage/4/ab/f9/k201/public_html" # Caminho do seu arquivo original
          # SSH_PORT_NUMBER: ${{ secrets.SSH_PORT_NUMBER }} # Descomente e defina o segredo se usar uma porta diferente da 22
        run: |
          # A porta padrão é 22. Se SSH_PORT_NUMBER estiver definido e não for vazio, use-o.
          SSH_PORT_OPTION=""
          if [ -n "$SSH_PORT_NUMBER" ]; then
            SSH_PORT_OPTION="-p $SSH_PORT_NUMBER"

          fi
          
          echo "Starting rsync..."
          # Usar sshpass para fornecer a senha para rsync via SSH
          # ARGS: -avzr --delete (archive, verbose, compress, recursive, delete no destino arquivos não existentes na origem)
          # SOURCE: "./" (diretório raiz do checkout; mude para "dist/" ou "build/" se tiver etapa de build)
          # EXCLUDE: padrões para excluir
          sshpass -e rsync -avzr --delete \
            --exclude='.git*' \
            --exclude='.github*' \
            --exclude='node_modules/' \
            -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $SSH_PORT_OPTION" \
            ./ ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.REMOTE_PATH }}/
          echo "rsync completed."

      - name: Post-deployment commands (Configure app_local.php)
        if: success()
        uses: appleboy/ssh-action@v1.0.3 
        env:

          script: |
            TARGET_DIR="/home/storage/4/ab/f9/k201/public_html"
            echo "Accessing directory $TARGET_DIR for post-deployment configuration"
            cd "$TARGET_DIR" || exit 1

            # Mover app_local.php do local especificado para a pasta de configuração
            SOURCE_APP_LOCAL_PATH="/home/storage/4/ab/f9/k201/app_local.php"
            DEST_CONFIG_DIR="$TARGET_DIR/config"
            DEST_APP_LOCAL_FILE="$DEST_CONFIG_DIR/app_local.php"

            echo "Checking for app_local.php at $SOURCE_APP_LOCAL_PATH..."
            if [ -f "$SOURCE_APP_LOCAL_PATH" ]; then
              echo "Found app_local.php at $SOURCE_APP_LOCAL_PATH."
              echo "Ensuring destination directory $DEST_CONFIG_DIR exists..."
              mkdir -p "$DEST_CONFIG_DIR"
              echo "Copying $SOURCE_APP_LOCAL_PATH to $DEST_APP_LOCAL_FILE..."
              if cp "$SOURCE_APP_LOCAL_PATH" "$DEST_APP_LOCAL_FILE"; then
                echo "Successfully copied app_local.php to $DEST_APP_LOCAL_FILE."
              else
                echo "ERROR: Failed to copy $SOURCE_APP_LOCAL_PATH to $DEST_APP_LOCAL_FILE."
                # Considere sair com erro aqui, dependendo da criticidade
                # exit 1
              fi
            else
              echo "WARNING: app_local.php not found at $SOURCE_APP_LOCAL_PATH. It will not be moved."
            fi
            
            echo "Post-deployment configuration completed."
            echo "Deploy completed successfully!!"
